//
//  DrawingViewController.swift
//  photoGraffiti
//
//  Created by Ryan Rotella on 3/14/25.
//generated by claude.ai: https://claude.ai/chat/4d621eea-b6c9-453a-8867-69760dd346c4 - initially

//tidying up sublayer logic - https://claude.ai/chat/10e505d0-0ea8-4440-b306-b566cf861317

import UIKit
import PhotosUI

//input of view - elements that will be in it
class DrawingViewController: UIViewController {
    
    // The view where we'll draw
    private var drawingView: DrawingView!
    
    // Color picker button
    private var colorPickerButton: UIButton!
    
    // Current selected color
    private var currentColor: UIColor = .black
    
//    //Background Color Picker Button
//    private var bgColorPickerButton: UIButton!
//    
//    //Current background color
//    private var bgColor: UIColor = .white
//

    // Line width slider
     private var lineWidthSlider: UISlider!
     
     // Line width label
     private var lineWidthLabel: UILabel!
     
     // Current line width
     private var currentLineWidth: CGFloat = 5.0
    
    //Clear all lines button
    private var clearButton: UIButton!
    
    private var photoButton: UIButton!

    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setupDrawingView()
        setupColorPickerButton()
        setupClearButton()
        setupPhotoButton()
        setupLineWidthControls()
    }
    
    private func setupDrawingView() {
        drawingView = DrawingView(frame: view.bounds)
        drawingView.backgroundColor = .white
        // Make sure to set the initial color on the drawing view
        drawingView.currentColor = currentColor
        view.addSubview(drawingView)
    }
    
    private func setupColorPickerButton() {
        colorPickerButton = UIButton(type: .system)
        colorPickerButton.setTitle("Choose Line Color", for: .normal)
        colorPickerButton.backgroundColor = currentColor
        colorPickerButton.setTitleColor(.white, for: .normal)
        colorPickerButton.frame = CGRect(x: 20, y: 50, width: 180, height: 44)
        colorPickerButton.layer.cornerRadius = 8
        colorPickerButton.addTarget(self, action: #selector(showColorPicker), for: .touchUpInside)
        view.addSubview(colorPickerButton)
    }
    
    private func setupClearButton() {
         clearButton = UIButton(type: .system)
         clearButton.setTitle("Clear Drawing", for: .normal)
         clearButton.backgroundColor = .red
         clearButton.setTitleColor(.white, for: .normal)
         clearButton.frame = CGRect(x: 200, y: 50, width: 180, height: 44)
         clearButton.layer.cornerRadius = 8
         clearButton.addTarget(self, action: #selector(clearDrawing), for: .touchUpInside)
         view.addSubview(clearButton)
         
     }
    
    private func setupLineWidthControls(){
        // Line width label
       lineWidthLabel = UILabel()
       lineWidthLabel.text = "Line Width: \(Int(currentLineWidth))"
       lineWidthLabel.frame = CGRect(x: 20, y: 100, width: 150, height: 20)
       lineWidthLabel.textColor = .black
       view.addSubview(lineWidthLabel)
       
       // Line width slider
       lineWidthSlider = UISlider()
       lineWidthSlider.frame = CGRect(x: 20, y: 120, width: view.frame.width - 40, height: 44)
       lineWidthSlider.minimumValue = 1.0
       lineWidthSlider.maximumValue = 20.0
       lineWidthSlider.value = Float(currentLineWidth)
       lineWidthSlider.addTarget(self, action: #selector(lineWidthChanged(_:)), for: .valueChanged)
       view.addSubview(lineWidthSlider)
    }
    
    @objc private func lineWidthChanged(_ sender: UISlider) {
           currentLineWidth = CGFloat(sender.value)
           lineWidthLabel.text = "Line Width: \(Int(currentLineWidth))"
           
           // Update the drawing view
           if let drawingView = self.view.subviews.first(where: { $0 is DrawingView }) as? DrawingView {
               drawingView.currentLineWidth = currentLineWidth
               print("Line width updated to: \(currentLineWidth)")
           }
       }
    
    private func setupPhotoButton(){
        photoButton = UIButton(type: .system)
       photoButton.setTitle("Photo", for: .normal)
       photoButton.backgroundColor = .systemBlue
       photoButton.setTitleColor(.white, for: .normal)
       photoButton.frame = CGRect(x: 10, y: 0, width: 80, height: 44)
       photoButton.layer.cornerRadius = 8
       photoButton.addTarget(self, action: #selector(pickPhoto), for: .touchUpInside)
       view.addSubview(photoButton)
    }

    @objc private func pickPhoto() {
          if #available(iOS 14.0, *) {
              // Modern PHPicker approach
              var configuration = PHPickerConfiguration()
              configuration.filter = .images
              configuration.selectionLimit = 1
              
              let picker = PHPickerViewController(configuration: configuration)
              picker.delegate = self
              present(picker, animated: true)
          } else {
              // Legacy UIImagePickerController for older iOS
              let picker = UIImagePickerController()
              picker.delegate = self
              picker.sourceType = .photoLibrary
              picker.allowsEditing = false
              present(picker, animated: true)
          }
      }
  
    
//    private func setupBgColorPickerButton(){
//        bgColorPickerButton = UIButton(type: .system)
//        bgColorPickerButton.setTitle("Choose Background Color", for: .normal)
//        bgColorPickerButton.backgroundColor = .black
//        bgColorPickerButton.setTitleColor(.white, for: .normal)
//        bgColorPickerButton.frame = CGRect(x: 200, y: 50, width: 200, height: 44)
//        bgColorPickerButton.layer.cornerRadius = 8
//        bgColorPickerButton.addTarget(self, action: #selector(showColorPicker), for: .touchUpInside)
//        view.addSubview(bgColorPickerButton)
//        
//    }
    
    @objc private func clearDrawing() {
           // Show confirmation alert
           let alert = UIAlertController(title: "Clear Drawing",
                                         message: "Are you sure you want to clear the entire drawing?",
                                         preferredStyle: .alert)
           
           alert.addAction(UIAlertAction(title: "Cancel", style: .cancel))
           
           alert.addAction(UIAlertAction(title: "Clear", style: .destructive) { [weak self] _ in
               // Call the clearDrawing method on our drawing view
               if let drawingView = self?.view.subviews.first(where: { $0 is DrawingView }) as? DrawingView {
                   drawingView.clearDrawing()
               }
           })
           
           present(alert, animated: true)
       }
    
    @objc private func showColorPicker() {
        if #available(iOS 14.0, *) {
            let colorPicker = UIColorPickerViewController()
            colorPicker.delegate = self
            colorPicker.selectedColor = currentColor
                      
            
            present(colorPicker, animated: true)
            
        } else {
            showLegacyColorPicker()
        }
    }


    
    
  
    
    private func showLegacyColorPicker() {
        let alert = UIAlertController(title: "Choose Color", message: nil, preferredStyle: .actionSheet)
        
        let colors: [UIColor] = [.black, .red, .green, .blue, .yellow, .purple, .orange]
        let colorNames = ["Black", "Red", "Green", "Blue", "Yellow", "Purple", "Orange"]
        
        for (index, color) in colors.enumerated() {
            let action = UIAlertAction(title: colorNames[index], style: .default) { [weak self] _ in
                self?.updateColor(color)
            }
            alert.addAction(action)
        }
        
        alert.addAction(UIAlertAction(title: "Cancel", style: .cancel))
        present(alert, animated: true)
    }
    
    private func updateColor(_ color: UIColor) {
        // Update the local color reference
        currentColor = color
        
        // Update the button appearance
        colorPickerButton.backgroundColor = color
        
        // KEY FIX: Ensure we're updating the drawing view's color
        if let drawingView = self.view.subviews.first(where: { $0 is DrawingView }) as? DrawingView {
            drawingView.currentColor = color
            print("Color updated to: \(color)") // Add logging for debugging
        }
    }
}


// MARK: - UIColorPickerViewControllerDelegate
extension DrawingViewController: UIColorPickerViewControllerDelegate {
    @available(iOS 14.0, *)
    func colorPickerViewControllerDidFinish(_ viewController: UIColorPickerViewController) {
        //upon closing colorpicker window, update color
        updateColor(viewController.selectedColor)
    }
    
    @available(iOS 14.0, *)
    func colorPickerViewControllerDidSelectColor(_ viewController: UIColorPickerViewController) {
        // For real-time color updates while in the picker
         updateColor(viewController.selectedColor)
    }
}


// MARK: - PHPickerViewControllerDelegate (iOS 14+)
@available(iOS 14, *)
extension DrawingViewController: PHPickerViewControllerDelegate {
    func picker(_ picker: PHPickerViewController, didFinishPicking results: [PHPickerResult]) {
        picker.dismiss(animated: true)
        
        guard let result = results.first else { return }
        
        result.itemProvider.loadObject(ofClass: UIImage.self) { [weak self] object, error in
            if let image = object as? UIImage {
                DispatchQueue.main.async {
                    self?.drawingView.setBackgroundImage(image)
                }
            }
        }
    }
}

// MARK: - UIImagePickerControllerDelegate (for older iOS)
extension DrawingViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        picker.dismiss(animated: true)
        
        if let image = info[.originalImage] as? UIImage {
            drawingView.setBackgroundImage(image)
        }
    }
    
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
        picker.dismiss(animated: true)
    }
}


//Output - detail how UIViewController elements materialize
// MARK: - DrawingView with Background Image Support
class DrawingView: UIView {
    
    // Array to store all lines that have been drawn
       var lines: [(path: UIBezierPath, color: UIColor, lineWidth: CGFloat)] = []
       
       // Current path being drawn
       private var currentPath: UIBezierPath?
       
       // Background image
       private var backgroundImage: UIImage?
       private var backgroundImageView: UIImageView?
       
       // Drawing layer - this will contain all the drawings
       private var drawingLayer: CAShapeLayer?
       
       // Color for new drawings
       var currentColor: UIColor = .black
       
       // Line width for new drawings
       var currentLineWidth: CGFloat = 5.0
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        setupView()
    }
    
    required init?(coder: NSCoder) {
        super.init(coder: coder)
        setupView()
    }
    
    private func setupView() {
        isMultipleTouchEnabled = false
        backgroundColor = .white
        
        // Create the drawing layer
        let layer = CAShapeLayer()
        layer.frame = bounds
        layer.lineWidth = currentLineWidth
        layer.lineCap = .round
        layer.lineJoin = .round
        layer.fillColor = UIColor.clear.cgColor
        self.layer.addSublayer(layer)
        drawingLayer = layer
    }
    
    // Set background image
    func setBackgroundImage(_ image: UIImage) {
        // Remove existing image view if any
        backgroundImageView?.removeFromSuperview()
        
        // Store the image
        backgroundImage = image
        
        // Create and configure image view
        let imageView = UIImageView(frame: bounds)
        imageView.contentMode = .scaleAspectFit
        imageView.image = image
        imageView.isUserInteractionEnabled = false  // Allow touches to pass through
        
        // Add as a subview at the back
        insertSubview(imageView, at: 0)
        backgroundImageView = imageView
        
        // Make sure our drawing view stays on top
        if let drawingLayer = drawingLayer {
            // Remove and re-add to bring to front
            drawingLayer.removeFromSuperlayer()
            self.layer.addSublayer(drawingLayer)
            
            // Alternatively, you could use:
            // self.layer.insertSublayer(drawingLayer, at: UInt32(self.layer.sublayers?.count ?? 0))
        }
    }
        
        // Clear drawing but keep background image
        func clearDrawing() {
            lines.removeAll()
            currentPath = nil
            setNeedsDisplay()
        }
        
        // MARK: - Touch Handling
        override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
            guard let touch = touches.first else { return }
            let location = touch.location(in: self)
            
            currentPath = UIBezierPath()
            currentPath?.lineWidth = 5.0
            currentPath?.lineCapStyle = .round
            currentPath?.lineJoinStyle = .round
            currentPath?.move(to: location)
        }
        
        override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) {
            guard let touch = touches.first, let path = currentPath else { return }
            let location = touch.location(in: self)
            
            path.addLine(to: location)
            setNeedsDisplay()
        }
        
        override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
            if let path = currentPath {
                // Make a copy of the path to store
                let pathCopy = UIBezierPath(cgPath: path.cgPath)
                let colorForLine = UIColor(cgColor: currentColor.cgColor)
                lines.append((path: pathCopy, color: colorForLine, lineWidth: currentLineWidth))
            }
            
            currentPath = nil
        }
        
        // MARK: - Drawing
        override func draw(_ rect: CGRect) {
            // Create a fresh image context for our drawing
            UIGraphicsBeginImageContextWithOptions(bounds.size, false, 0.0)
            let context = UIGraphicsGetCurrentContext()
            
            // Clear the context
            context?.clear(rect)
            
            // Draw all previous lines
            for line in lines {
                line.color.setStroke()
                line.path.lineWidth = line.lineWidth
                line.path.stroke()
            }
            
            // Draw current path
            if let path = currentPath {
                currentColor.setStroke()
                path.lineWidth = currentLineWidth
                path.stroke()
            }
            
            // Get the image of our drawing
            let drawingImage = UIGraphicsGetImageFromCurrentImageContext()
            UIGraphicsEndImageContext()
            
            // Create an image view to display on top of the background
            if let imageView = viewWithTag(999) as? UIImageView {
                // Update existing image view
                imageView.image = drawingImage
            } else {
                // Create new drawing image view on top
                let drawingImageView = UIImageView(frame: bounds)
                drawingImageView.tag = 999
                drawingImageView.contentMode = .scaleToFill
                drawingImageView.image = drawingImage
                drawingImageView.backgroundColor = .clear
                drawingImageView.isUserInteractionEnabled = false
                self.addSubview(drawingImageView)
                bringSubviewToFront(drawingImageView)
            }
        }
    }
    


//extension UIColor {
//    var inverted: UIColor {
//        var r: CGFloat = 0.0, g: CGFloat = 0.0, b: CGFloat = 0.0, a: CGFloat = 0.0
//        self.getRed(&r, green: &g, blue: &b, alpha: &a)
//        return UIColor(red: (1 - r), green: (1 - g), blue: (1 - b), alpha: a) // Assuming you want the same alpha value.
//    }
//}
//https://stackoverflow.com/questions/31639907/is-it-possible-to-access-the-invert-colors-function-that-s-in-ios-accessibility
